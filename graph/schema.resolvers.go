package graph


			// This file will be automatically regenerated based on the schema, any resolver implementations
			// will be copied through when generating and any unknown code will be moved to the end.
			// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
"context"
"fmt"
"io"
"strconv"
"time"
"sync"
"errors"
"bytes"
gqlparser "github.com/vektah/gqlparser/v2"
"github.com/vektah/gqlparser/v2/ast"
"github.com/99designs/gqlgen/graphql"
"github.com/99designs/gqlgen/graphql/introspection"
"github.com/miguelamello/user-domain-role-service/graph/model")


















// Implement the CreateUser resolver function
This function will be skipped in schema.resolvers.go
	func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) ( *model.User,  error){
		// Implement the logic to create a new user
	// Generate a unique ID for the new user
	userID := generateUniqueID()

	// Create a new user object
	newUser := &model.User{
		ID:    userID,
		Name:  input.Name,
		Email: input.Email,
		// Initialize other fields as needed
	}

	// Save the new user to the database or perform any other necessary actions

	// Return the newly created user
	return newUser, nil
	}

// UpdateUser is the resolver for the updateUser field.
	func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input model.UpdateUser) ( *model.User,  error){
		panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
	}

// DeleteUser is the resolver for the deleteUser field.
	func (r *mutationResolver) DeleteUser(ctx context.Context, id string) ( *model.User,  error){
		panic(fmt.Errorf("not implemented: DeleteUser - deleteUser"))
	}

// UserByID is the resolver for the userById field.
	func (r *queryResolver) UserByID(ctx context.Context, id string) ( *model.User,  error){
		panic(fmt.Errorf("not implemented: UserByID - userById"))
	}

// UserByName is the resolver for the userByName field.
	func (r *queryResolver) UserByName(ctx context.Context, name string) ( *model.User,  error){
		panic(fmt.Errorf("not implemented: UserByName - userByName"))
	}

// UserByEmail is the resolver for the userByEmail field.
	func (r *queryResolver) UserByEmail(ctx context.Context, email *string) ( *model.User,  error){
		panic(fmt.Errorf("not implemented: UserByEmail - userByEmail"))
	}

// Roles is the resolver for the roles field.
	func (r *queryResolver) Roles(ctx context.Context) ( []*model.Role,  error){
		panic(fmt.Errorf("not implemented: Roles - roles"))
	}

// Domains is the resolver for the domains field.
	func (r *queryResolver) Domains(ctx context.Context) ( []*model.Domain,  error){
		panic(fmt.Errorf("not implemented: Domains - domains"))
	}

// Permissions is the resolver for the permissions field.
	func (r *queryResolver) Permissions(ctx context.Context) ( []*model.Permission,  error){
		panic(fmt.Errorf("not implemented: Permissions - permissions"))
	}



// Mutation returns MutationResolver implementation.
	func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }
// Query returns QueryResolver implementation.
	func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }


type mutationResolver struct { *Resolver }
type queryResolver struct { *Resolver }



